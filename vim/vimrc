set nocompatible              " be iMproved, required
filetype off                  " required
let g:python_host_prog = '/usr/bin/python'
let g:python3_host_prog = '/usr/local/bin/python3'
set clipboard=unnamed

" Plugins will be downloaded under the specified directory.
call plug#begin('~/.vim/plugged')

" Declare the list of plugins.
" Color scheme plugins
Plug 'morhetz/gruvbox'

" == General editor plugins ==
Plug 'tpope/vim-surround'
Plug 'tpope/vim-repeat'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
Plug 'tomtom/tcomment_vim'
Plug 'christoomey/vim-tmux-navigator'
Plug 'editorconfig/editorconfig-vim'
Plug 'bling/vim-airline'
Plug 'ctrlpvim/ctrlp.vim'

" Autocomplete plugins
Plug 'ervandew/supertab'
Plug 'mattn/emmet-vim', {'for': ['javascript.jsx', 'html', 'css']}
Plug 'jiangmiao/auto-pairs'

" == Syntax ==
Plug 'othree/html5.vim'
Plug 'jparise/vim-graphql'

" == JavaScript syntax highlighting ==
Plug 'othree/yajs.vim'
Plug 'moll/vim-node', {'for': 'javascript'}
Plug 'mxw/vim-jsx', {'for': ['jsx', 'javascript.jsx']}
Plug 'othree/javascript-libraries-syntax.vim'
Plug 'pangloss/vim-javascript', {'for': ['javascript.jsx', 'javascript']}
Plug 'leafgarland/typescript-vim'

" == SCSS and CSS syntax highlighting ==
Plug 'JulesWang/css.vim'
Plug 'cakebaker/scss-syntax.vim'

" == Linting ==
Plug 'w0rp/ale'
Plug 'prettier/vim-prettier'

" == Python ==
Plug 'Vimjas/vim-python-pep8-indent'
Plug 'ambv/black'

" List ends here. Plugins become visible to Vim after this call.
call plug#end()

" === Plugin settings ===

" Prettier
let g:prettier#autoformat = 0
" autocmd BufWritePre *.js,*.jsx,*.mjs,*.ts,*.tsx,*.css,*.less,*.scss,*.json,*.graphql,*.md,*.vue Prettier

let g:SuperTabDefaultCompletionType = "<c-n>"

"" == w0rp/ale ==
let g:ale_sign_error = '●'
let g:ale_lint_on_save = 1
let g:ale_lint_on_text_changed = 0
let g:ale_lint_on_enter = 0
let g:ale_linters = {
\   'javascript': ['eslint'],
\   'python': ['flake8', 'mypy']
\}

"" == mxw/vim-jsx ==
let g:jsx_ext_required = 0

"" == mattn/emmet-vim ==
let g:user_emmet_settings = {
\  'javascript' : {
\      'extends' : 'jsx',
\   },
\}
let g:user_emmet_leader_key='<C-e>'

" == ctrlpvim/ctrlp.vim ==
let g:ctrlp_working_path_mode = 'rw'
let g:ctrlp_custom_ignore = 'node_modules\|DS_Store\|git'
let g:ctrlp_show_hidden = 1

" == Airline ==
let g:airline#extensions#tabline#enabled = 1
let g:airline_powerline_fonts = 1
let g:airline_left_sep = '⮀'
let g:airline_left_alt_sep = '⮁'
let g:airline_right_sep = '⮂'
let g:airline_right_alt_sep = '⮃'
let g:airline_left_sep = '»'
let g:airline_left_sep = '▶'
let g:airline_right_sep = '«'
let g:airline_right_sep = '◀'
set laststatus=2
set t_Co=256

" === Keybindings ===
let mapleader = ","
imap jk <Esc>
nmap k gk
nmap j gj
" copy entire file to clipboard
nmap <leader>co ggVG"*y
nmap <leader>vr :tabe $MYVIMRC<cr>
nmap <leader>so :source $MYVIMRC<cr>
" Edit/split/create a file in the same dir as the current
nmap <leader>e :e <C-R>=escape(expand("%:p:h"), '') . '/'<cr>
nmap <leader>s :split <C-R>=escape(expand("%:p:h"), '') . '/'<cr>
nmap <leader>v :vnew <C-R>=escape(expand("%:p:h"), '') . '/'<cr>
" Remove all trailing whitespace by pressing F5
nnoremap <F5> :let _s=@/<Bar>:%s/\s\+$//e<Bar>:let @/=_s<Bar><CR>
" turn off search highlight
nnoremap <leader><space> :nohlsearch<CR>

" listen to me vim
command! Q q

" == COLOR SCHEME ==
colorscheme gruvbox

" == GENERAL SETTINGS ==
" SETTINGS
if has("gui_running")
  let s:uname = system("uname")
  if s:uname == "Darwin\n"
    set guifont=Inconsolata\ for\ Powerline:h15
  endif
endif
" syntax enable " enable syntax
let python_highlight_all=1
set encoding=utf-8
set background=dark
set backspace=2
set ruler
set linebreak
set guifont=Inconsolata\ for\ Powerline:h20
"set macligatures
set tabstop=2 " set tab to 4
set visualbell
set ttyfast
set gdefault
set splitright " open split on right not left
set splitbelow " open split below not above
set noswapfile
set wildmenu
set wildmode=longest:full,full
set softtabstop=2 " set editor tab to 4
set shiftwidth=2 " for indent options on text i.e. >>
set expandtab " set tabs to spaces
set number " show line numbers
set numberwidth=5
set showcmd " show command at bottom
set cursorline " highlight current line
set wildmenu " autocomplete for menu
set lazyredraw " redraw less often
set showmatch " highlight match
set incsearch " search as characters are entered
set hlsearch " hightlight matches
set list listchars=tab:»\ ,trail:·,extends:>,precedes:<,space:␣
set textwidth=100
set formatoptions=qrn1
set wrapmargin=0
set noswapfile
set colorcolumn=+1
set foldmethod=indent
set foldlevel=99

" FUNCTIONS
fun! <SID>StripTrailingWhitespaces()
    let l = line(".")
    let c = col(".")
    %s/\s\+$//e
    call cursor(l, c)
endfun

function! TrimEndLinesMain()
    let save_cursor = getpos(".")
    :silent! %s#\($\n\s*\)\+\%$##
    call setpos('.', save_cursor)
endfunction

function! DeleteHiddenBuffers()
    let tpbl=[]
    call map(range(1, tabpagenr('$')), 'extend(tpbl, tabpagebuflist(v:val))')
    for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1')
        silent execute 'bwipeout' buf
    endfor
endfunction
cabbrev dhb call DeleteHiddenBuffers()

autocmd Filetype help nmap <buffer>q :q<cr>
autocmd BufWritePre * :call <SID>StripTrailingWhitespaces()
autocmd BufWritePre * :call TrimEndLinesMain()
" Python PEP8 indentation
autocmd BufNewFile,BufRead *.py setlocal ts=4 sw=4 sts=4 ai fileformat=unix
" Python Black formatting
autocmd BufWritePre *.py execute ':Black'
autocmd BufNewFile,BufRead *.c  setlocal ts=4 sw=4 sts=4 ai fileformat=unix
